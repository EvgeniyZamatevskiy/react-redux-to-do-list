{"version":3,"file":"static/js/login.ab466e24.chunk.js","mappings":"kVACA,EAA+B,4B,SCmBlBA,EAAY,WAEvB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GAErBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CAACC,MAAO,qBAAsBC,SAAU,OAAQC,YAAY,GAC3EC,SAAU,SAACC,GACT,IAAMC,EAA0B,CAAC,EAkBjC,OAhBKD,EAAOJ,QACVK,EAAOL,MAAQ,sBAGZI,EAAOH,WACVI,EAAOJ,SAAW,yBAGf,4CAA4CK,KAAKF,EAAOJ,SAC3DK,EAAOL,MAAQ,yBAGbI,EAAOH,SAASM,OAAS,IAC3BF,EAAOJ,SAAW,4CAGbI,CACR,EACDG,SAAU,SAACJ,GACTZ,GAASiB,EAAAA,EAAAA,IAAML,GAChB,IAGH,OAAIV,GACK,SAAC,KAAD,CAAUgB,GAAIC,EAAAA,EAAAA,QAIrB,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,eAAgB,SAAhC,UACE,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACD,eAAgB,SAA3B,UACE,UAACE,EAAA,EAAD,YACE,UAACC,EAAA,EAAD,YACE,sDACE,cAAGC,KAAM,wCAAyCC,OAAQ,SAA1D,uBAEF,uEAEF,iBAAMX,SAAUX,EAAOuB,aAAvB,UACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,GAAD,QACEC,MAAM,QACNC,OAAO,UACH3B,EAAO4B,cAAc,WAE1B5B,EAAO6B,QAAQ1B,OAASH,EAAOQ,OAAOL,QACrC,gBAAK2B,UAAWC,EAAhB,SAAuC/B,EAAOQ,OAAOL,SACvD,SAACsB,EAAA,GAAD,QACEO,KAAK,WACLN,MAAM,WACNC,OAAO,UACH3B,EAAO4B,cAAc,cAE1B5B,EAAO6B,QAAQzB,UAAYJ,EAAOQ,OAAOJ,WACxC,gBAAK0B,UAAWC,EAAhB,SAAuC/B,EAAOQ,OAAOJ,YACvD,SAAC6B,EAAA,EAAD,CACEP,MAAO,cACPQ,SAAS,SAACC,EAAA,GAAD,UAAcnC,EAAO4B,cAAc,mBAC9C,SAACQ,EAAA,EAAD,CAAQJ,KAAM,SAAUK,QAAS,YAAaC,MAAO,UAArD,8BAOb,C","sources":["webpack://react-to-do-list/./src/pages/login/index.module.css?f21d","pages/login/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"login_errorMessage__EbD78\"};","import React, { FC } from \"react\"\r\nimport Grid from \"@mui/material/Grid\"\r\nimport Checkbox from \"@mui/material/Checkbox\"\r\nimport FormControl from \"@mui/material/FormControl\"\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\"\r\nimport FormGroup from \"@mui/material/FormGroup\"\r\nimport FormLabel from \"@mui/material/FormLabel\"\r\nimport TextField from \"@mui/material/TextField\"\r\nimport Button from \"@mui/material/Button\"\r\nimport { useFormik } from \"formik\"\r\nimport { useAppDispatch } from \"hooks\"\r\nimport { login } from \"store/asyncActions/auth\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectIsAuth } from \"store/selectors/auth\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { Path } from \"enums/Path\"\r\nimport { FormikErrorType } from \"./types\"\r\nimport { LoginDataType } from \"api/auth/types\"\r\nimport classes from \"./index.module.css\"\r\n\r\nexport const Login: FC = () => {\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isAuth = useSelector(selectIsAuth)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {email: \"free@samuraijs.com\", password: \"free\", rememberMe: false},\r\n    validate: (values: LoginDataType) => {\r\n      const errors: FormikErrorType = {}\r\n\r\n      if (!values.email) {\r\n        errors.email = \"Email is required!\"\r\n      }\r\n\r\n      if (!values.password) {\r\n        errors.password = \"Password is required!\"\r\n      }\r\n\r\n      if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = \"Invalid email address\"\r\n      }\r\n\r\n      if (values.password.length < 3) {\r\n        errors.password = \"Password must be more than 3 characters!\"\r\n      }\r\n\r\n      return errors\r\n    },\r\n    onSubmit: (values: LoginDataType) => {\r\n      dispatch(login(values))\r\n    },\r\n  })\r\n\r\n  if (isAuth) {\r\n    return <Navigate to={Path.HOME}/>\r\n  }\r\n\r\n  return (\r\n    <Grid container justifyContent={\"center\"}>\r\n      <Grid item justifyContent={\"center\"}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered:\r\n              <a href={\"https://social-network.samuraijs.com/\"} target={\"_blank\"}> here</a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n          </FormLabel>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"email\")}\r\n              />\r\n              {formik.touched.email && formik.errors.email &&\r\n                <div className={classes.errorMessage}>{formik.errors.email}</div>}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"password\")}\r\n              />\r\n              {formik.touched.password && formik.errors.password &&\r\n                <div className={classes.errorMessage}>{formik.errors.password}</div>}\r\n              <FormControlLabel\r\n                label={\"Remember me\"}\r\n                control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}/>}/>\r\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>Login</Button>\r\n            </FormGroup>\r\n          </form>\r\n        </FormControl>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n"],"names":["Login","dispatch","useAppDispatch","isAuth","useSelector","selectIsAuth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","login","to","Path","Grid","container","justifyContent","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","className","classes","type","FormControlLabel","control","Checkbox","Button","variant","color"],"sourceRoot":""}